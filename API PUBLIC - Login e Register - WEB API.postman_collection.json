{
	"info": {
		"_postman_id": "a48598c2-ac80-4bda-97a0-0286b98a1552",
		"name": "API PUBLIC - Login e Register - WEB API",
		"description": "## Teste de Schema- API de Controle de Usuario\n\n## StartFragmentA **Reqres** é uma ótima API para testar cenários de autenticação, incluindo casos de sucesso e falha​;  \n\n## ([JSONPlaceholder](https://jsonplaceholder.typicode.com/))​([Requisitos](https://reqres.in/)).EndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16145434"
	},
	"item": [
		{
			"name": "Cadastrar Usuário",
			"item": [
				{
					"name": "New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(`Validação do body response com id, token`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Servidor está utilizando HTTPS\", function () {\r",
									"    pm.expect(pm.request.url.protocol).to.equal(\"https\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"charles.morris@reqres.in\",\r\n  \"password\": \"pistol\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "Generated from cURL: curl --location 'http://www.ticode.com.br/minhas-financas/api/v1/usuario/cadastrarUsuario' \\\r\n--header 'Authorization: Bearer <token>' \\\r\n--data-raw '{\r\n\t\"usuario\": {\r\n\t\t\"nome\": \"Ana Valadares\",\r\n\t\t\"email\": \"usuario@teste.com\",\r\n\t\t\"senha\": \"password\",\r\n\t\t\"dataNascimento\": \"YYYYMMDD\",\r\n\t\t\"profissao\": \"Analista de qualidade\",\r\n\t\t\"telefone\": 2126235978\r\n\t}\r\n}'"
					},
					"response": []
				},
				{
					"name": "Details User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`[Detalhes do usuário] Body Response com dados esperados`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"first_name\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"last_name\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(`[Detalhes do usuário] Tem um corpo JSON com Dados e Suporte`, function () {\r",
									"    const jsonsupport = pm.response.json();\r",
									"    pm.expect(jsonsupport).to.have.property(\"support\");\r",
									"    pm.expect(jsonsupport.support).to.have.property(\"url\");\r",
									"    pm.expect(jsonsupport.support).to.have.property(\"text\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response Time está dentro do MS aceitável\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "O schema principal utilizado pelas requisições de **usuário** para realizar as validações ficam nessa pasta.\n\nAs requisições podem acessar ao schema através da variável `schemaUsuario`.\n\nComo os demais endpoints ainda não foram desenvolvidos, todas as propriedades do objeto `usuario` estão como obrigatórias.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const schemaUsuario = {",
							"    \"title\": \"Usuario\",",
							"    \"description\": \"Schema do Usuario\",",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"usuario\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"id\": {",
							"                    \"type\": \"number\"",
							"                },",
							"                \"nome\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"dataNascimento\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"email\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"senha\": {",
							"                    \"type\": \"string\"",
							"                },    ",
							"                \"profissao\": {",
							"                    \"type\": \"string\"",
							"                },   ",
							"                \"telefone\": {",
							"                    \"type\": \"number\"",
							"                },     ",
							"            },",
							"            \"additionalProperties\": false,",
							"            \"required\": [\"id\", \"nome\", \"dataNascimento\", \"email\", \"senha\", \"profissao\", \"telefone\"]        ",
							"        },",
							"        \"mensagem\": {",
							"            \"type\": \"string\"",
							"        }",
							"    },",
							"    \"additionalProperties\": false,",
							"    \"required\": [",
							"        \"usuario\",",
							"        \"mensagem\"",
							"    ]",
							"};",
							"",
							"//O schema esperado fica armazenado em uma variável local",
							"pm.variables.set(\"schemaUsuario\", JSON.stringify(schemaUsuario));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login Usuário",
			"item": [
				{
					"name": "Login, Password = enter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let interactionCount = pm.environment.get(\"interactionCount\") || 0;\r",
									"\r",
									"interactionCount++;\r",
									"\r",
									"pm.environment.set(\"interactionCount\", interactionCount);\r",
									"\r",
									"if (interactionCount > 10) {\r",
									"    pm.test(\"Timeout: número máximo de interações alcançado\", function () {\r",
									"        pm.expect(true).to.be.false; // Força a falha do teste\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Interação dentro do limite\", function () {\r",
									"        pm.expect(interactionCount).to.be.at.most(10); \r",
									"    });\r",
									"}\r",
									"\r",
									"// Teste para login\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"O esquema é válido\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"token\");\r",
									"    });\r",
									"    \r",
									"    pm.test(\"O token está em um formato válido\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.token).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"O esquema é válido\", function () {\r",
									"  pm.response.to.have.jsonSchema({\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      token: {\r",
									"        type: \"string\"\r",
									"      }\r",
									"    },\r",
									"    required: [\"token\"]\r",
									"  });\r",
									"});\r",
									"\r",
									"pm.test(\"O token está em um formato válido\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.token).to.be.a('string');\r",
									"    pm.expect(responseData.token).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"O cabeçalho Content-Type é application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"O tempo de resposta é inferior a 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Validação de senhas incorretas eql 400\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    if (pm.response.code === 400) {\r",
									"        pm.expect(responseData.error).to.be.a('string').and.to.not.be.empty;\r",
									"    } else {\r",
									"        pm.expect(responseData.error).to.not.exist;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Tempo de Resposta abaixo de 2 segundos\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Número de usuários suportado (ajuste conforme a resposta da API)\r",
									"pm.test(\"Número de usuários suportado\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.user_count !== undefined) {\r",
									"        pm.expect(jsonData.user_count).to.be.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Timout no Servidor\", function () {\r",
									"    pm.expect(pm.response.status).to.not.equal(503);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"eve.holt@reqres.in\",\r\n  \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "**🇧🇷**\n\n* * *\n\nComo essa pasta possui apenas um endpoint, o schema ficou definido diretamente na requisição.  \nA definição do schema esperado encontra-se em `Pre-script request`.\n\n**🇺🇸**\n\n* * *\n\nAs this folder has only one endpoint, the schema was defined directly in the request.  \nThe definition of the expected schema can be found in `Pre-script request`."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {\r",
					"    pm.response.to.have.status(200);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "{{baseUrl}}",
			"disabled": true
		}
	]
}
